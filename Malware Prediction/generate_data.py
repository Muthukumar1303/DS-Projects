# -*- coding: utf-8 -*-
"""
Created on Mon Jan 10 12:29:16 2022

@author: postulate-41
"""

from os import listdir
from PIL import Image
import os.path
import numpy as np
import cv2
import pandas as pd
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import Input
from keras.models import Model
from keras.layers import Dense
from keras.layers import Flatten
import tensorflow as tf
def get_array(path):
    h = 100 #height of image
    w = 100 #width of image
    
    #be careful with using this function, it will consume memory, access to disk and time
    images = []
    #path = 'train/0BEsCP7NAUy8XmkenHWG.asm'
    with open(path, 'rb') as img_set:
        img_arr = img_set.read(h*w)
        img_arr2 = img_set.read()
        
        while img_arr:
            if len(img_arr) == h*w :
                images.append(img_arr)
            img_arr = img_set.read(h*w)
    
    #And you can save them into png files
    count = 0
    for img in images:
        png = Image.fromarray(np.reshape(list(img), (h,w)).astype('float32'), mode='L')
        png.save('image_file.jpg')
        count += 1
    arr=cv2.imread('image_file.jpg',0)
    return arr


X=[]
Y=[]
files=os.listdir('train')
data=pd.read_csv('trainLabels.csv')
l=len(data)
k=0
for asm_f in files:
    asmfn=asm_f[:-4]
    c1=data[data['Id']==asmfn]
    target=c1.iloc[0,1]
    path=os.path.join('train',asm_f)
    arr=get_array(path)
    X.append(arr)
    Y.append(target)


Xd=np.array(X)
Yd=np.array(Y)
ys=pd.Series(Y)
yc=pd.get_dummies(ys)
ya=np.array(yc)
Xd=Xd.reshape(Xd.shape[0],Xd.shape[1],Xd.shape[2],1)
from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest = train_test_split(Xd,ya, test_size=0.05)

new_input = Input(shape=(100, 100, 1))
model = MobileNetV2(include_top=False,weights=None, input_tensor=new_input,classes=9)


flat1 = Flatten()(model.layers[-1].output)
class1 = Dense(1024, activation='relu')(flat1)
output = Dense(9, activation='softmax')(class1)

model = Model(inputs=model.inputs, outputs=output)



model.compile(optimizer='Adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])


my_call_back=[
    tf.keras.callbacks.EarlyStopping(monitor="accuracy",patience=20,restore_best_weights=True),
    tf.keras.callbacks.ModelCheckpoint(filepath="best_model.h5",monitor='accuracy',mode="max",save_best_only=True)
    ]


model.fit(xtrain, ytrain,batch_size=1,epochs=10,validation_data=(xtest, ytest),callbacks=my_call_back)
